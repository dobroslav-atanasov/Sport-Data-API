    #region FENCING
    private async Task ProcessFencingAsync(ConvertOptions options)
    {
        throw new NotImplementedException();
    }
    #endregion

    #region EQUESTRIAN
    private async Task ProcessEquestrianVaulting(ConvertOptions options)
    {
        var eventRound = this.CreateEventRound<EVARound>(options.HtmlDocument, options.Event.Name);
        var round = this.CreateRound<EVARound>(eventRound.Dates.From, eventRound.Format, RoundType.FinalRound, eventRound.EventName);

        if (options.Event.IsTeamEvent)
        {
            await this.SetEVATeamsAsync(round, options.StandingTable.HtmlDocument, options.Event);
        }
        else
        {
            await this.SetEVAEquestriansAsync(round, options.StandingTable.HtmlDocument, options.Event);
        }

        eventRound.Rounds.Add(round);
        await this.ProcessJsonAsync(eventRound, options);
    }

    private async Task SetEVATeamsAsync(EVARound round, HtmlDocument htmlDocument, EventCacheModel eventCache)
    {
        var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        EVATeam evaTeam = null;
        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var name = data[indexes[ConverterConstants.INDEX_NAME]].InnerText.Trim();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);

            var points = this.GetResult(indexes, ConverterConstants.INDEX_POINTS, data, ResultFormat.Decimal).Decimal;
            points ??= this.GetResult(indexes, ConverterConstants.INDEX_PENALTY, data, ResultFormat.Decimal).Decimal;

            if (nocCode != null)
            {
                var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
                var team = await this.teamsService.GetAsync(nocCacheModel.Id, eventCache.Id);

                evaTeam = new EVATeam
                {
                    Id = team.Id,
                    Name = name,
                    NOC = nocCode,
                    Points = this.GetResult(indexes, ConverterConstants.INDEX_POINTS, data, ResultFormat.Decimal).Decimal
                };

                round.Teams.Add(evaTeam);
            }
            else
            {
                var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
                var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == evaTeam.NOC);
                var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id, nocCacheModel.Id);

                var equestrian = new EVAEquestrian
                {
                    Id = participant.Id,
                    Code = athleteModel.Code,
                    Name = athleteModel.Name,
                    NOC = nocCode,
                    Points = this.GetResult(indexes, ConverterConstants.INDEX_POINTS, data, ResultFormat.Decimal).Decimal
                };

                evaTeam.Equestrians.Add(equestrian);
            }
        }
    }

    private async Task SetEVAEquestriansAsync(EVARound round, HtmlDocument htmlDocument, EventCacheModel eventCache)
    {
        var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);
            var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
            var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
            var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id, nocCacheModel.Id);

            var equestrian = new EVAEquestrian
            {
                Id = participant.Id,
                Code = athleteModel.Code,
                Name = athleteModel.Name,
                NOC = nocCode,
                Points = this.GetResult(indexes, ConverterConstants.INDEX_POINTS, data, ResultFormat.Decimal).Decimal
            };

            round.Equestrians.Add(equestrian);
        }
    }

    private async Task ProcessEquestrianJumping(ConvertOptions options)
    {
        var eventRound = this.CreateEventRound<EJPRound>(options.HtmlDocument, options.Event.Name);

        if (options.Event.IsTeamEvent)
        {
            if (options.Tables.Any())
            {
                if (options.Tables.Count == 1)
                {
                    var round = this.CreateRound<EJPRound>(eventRound.Dates.From, eventRound.Format, RoundType.FinalRound, eventRound.EventName);
                    await this.SetEJRTeamsAsync(round, options.StandingTable.HtmlDocument, options.Event);
                    this.ConvertEJPTeamsDocuments(round, options.Documents, options.Event);
                    eventRound.Rounds.Add(round);
                }

                foreach (var table in options.Tables)
                {
                    var format = this.RegExpService.MatchFirstGroup(table.HtmlDocument.DocumentNode.OuterHtml, @"<th>Format<\/th>\s*<td(?:.*?)>(.*?)<\/td>");
                    var dateString = this.RegExpService.MatchFirstGroup(table.HtmlDocument.DocumentNode.OuterHtml, @"<th>\s*Date\s*<\/th>\s*<td>(.*?)<\/td>");
                    var dateModel = this.dateService.ParseDate(dateString);
                    var round = this.CreateRound<EJPRound>(dateModel.From, format, table.Round, eventRound.EventName);
                    await this.SetEJRTeamsAsync(round, table.HtmlDocument, options.Event);
                    this.ConvertEJPTeamsDocuments(round, options.Documents, options.Event);
                    eventRound.Rounds.Add(round);
                }
            }
            else
            {
                var round = this.CreateRound<EJPRound>(eventRound.Dates.From, eventRound.Format, RoundType.FinalRound, eventRound.EventName);
                await this.SetEJRTeamsAsync(round, options.StandingTable.HtmlDocument, options.Event);
                this.ConvertEJPTeamsDocuments(round, options.Documents, options.Event);
                eventRound.Rounds.Add(round);
            }
        }
        else
        {
            if (options.Tables.Any())
            {
                foreach (var table in options.Tables)
                {
                    var format = this.RegExpService.MatchFirstGroup(table.HtmlDocument.DocumentNode.OuterHtml, @"<th>Format<\/th>\s*<td(?:.*?)>(.*?)<\/td>");
                    var dateString = this.RegExpService.MatchFirstGroup(table.HtmlDocument.DocumentNode.OuterHtml, @"<th>\s*Date\s*<\/th>\s*<td>(.*?)<\/td>");
                    var dateModel = this.dateService.ParseDate(dateString);
                    var round = this.CreateRound<EJPRound>(dateModel.From, format, table.Round, eventRound.EventName);
                    await this.SetEJREquestriansAsync(round, table.HtmlDocument, options.Event);
                    this.ConvertEJPDocuments(round, options.Documents, options.Event);
                    eventRound.Rounds.Add(round);
                }
            }
            else
            {
                var round = this.CreateRound<EJPRound>(eventRound.Dates.From, eventRound.Format, RoundType.FinalRound, eventRound.EventName);
                await this.SetEJREquestriansAsync(round, options.StandingTable.HtmlDocument, options.Event);
                this.ConvertEJPDocuments(round, options.Documents, options.Event);
                eventRound.Rounds.Add(round);
            }
        }

        await this.ProcessJsonAsync(eventRound, options);
    }

    private void ConvertEJPTeamsDocuments(EJPRound round, IOrderedEnumerable<Document> documents, EventCacheModel eventCache)
    {
        foreach (var document in documents)
        {
            var htmlDocument = this.CreateHtmlDocument(document);
            var title = htmlDocument.DocumentNode.SelectSingleNode("//h1").InnerText;
            if (!title.ToLower().Contains("standings"))
            {
                title = title.Replace(eventCache.OriginalName, string.Empty).Replace("â€“", string.Empty).Trim().ToLower();
                var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
                var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
                var indexes = this.OlympediaService.FindIndexes(headers);

                foreach (var row in rows.Skip(1))
                {
                    var data = row.Elements("td").ToList();
                    var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);

                    var points = this.GetResult(indexes, ConverterConstants.INDEX_INDIVIDUAL_POINTS, data, ResultFormat.Decimal).Decimal;
                    var jump = this.GetResult(indexes, ConverterConstants.INDEX_JUMP_PENALTY, data, ResultFormat.Int).Int;
                    var time = this.GetResult(indexes, ConverterConstants.INDEX_TIME_PENALTY, data, ResultFormat.Int).Int;

                    EJPPart part = null;
                    if (nocCode != null)
                    {
                        var team = round.Teams.FirstOrDefault(x => x.NOC == nocCode);

                        if (team == null)
                        {
                            continue;
                        }
                        if (title == "round #1" || title == "part #1")
                        {
                            part = team.Parts.ElementAtOrDefault(0);
                        }
                        else if (title == "round #2" || title == "part #2")
                        {
                            part = team.Parts.ElementAtOrDefault(1);
                        }
                    }
                    else
                    {
                        var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
                        var equstrian = round.Equestrians.FirstOrDefault(x => x.Code == athleteModel.Code);

                        if (equstrian == null)
                        {
                            continue;
                        }
                        if (title == "round #1" || title == "part #1")
                        {
                            part = equstrian.Parts.ElementAtOrDefault(0);
                        }
                        else if (title == "round #2" || title == "part #2")
                        {
                            part = equstrian.Parts.ElementAtOrDefault(1);
                        }
                    }

                    if (part != null)
                    {
                        if (points != null)
                        {
                            part.PenaltyPoints = points;
                        }

                        part.JumpPenaltyPoints = jump;
                        part.TimePenaltyPoints = time;
                    }
                }
            }
        }
    }

    private async Task SetEJRTeamsAsync(EJPRound round, HtmlDocument htmlDocument, EventCacheModel eventCache)
    {
        var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        EJPTeam ejpTeam = null;
        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var name = data[indexes[ConverterConstants.INDEX_NAME]].InnerText.Trim();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);

            var points = this.GetResult(indexes, ConverterConstants.INDEX_POINTS, data, ResultFormat.Decimal).Decimal;
            points ??= this.GetResult(indexes, ConverterConstants.INDEX_PENALTY, data, ResultFormat.Decimal).Decimal;

            if (nocCode != null)
            {
                var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
                var team = await this.teamsService.GetAsync(nocCacheModel.Id, eventCache.Id);

                ejpTeam = new EJPTeam
                {
                    Id = team.Id,
                    Name = name,
                    NOC = nocCode,
                    FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                    Qualification = this.OlympediaService.FindQualification(row.OuterHtml),
                    PenaltyPoints = points,
                    Time = this.GetResult(indexes, ConverterConstants.INDEX_TIME, data, ResultFormat.TimeSpan).Time,
                    TimePenaltyPoints = this.GetResult(indexes, ConverterConstants.INDEX_TIME_PENALTY, data, ResultFormat.Int).Int,
                    JumpOff1PenaltyPoints = this.GetResult(indexes, ConverterConstants.INDEX_JUMP_OFF_PENALTY_1, data, ResultFormat.Decimal).Decimal,
                    JumpOffTime = this.GetResult(indexes, ConverterConstants.INDEX_JUMP_OFF_TIME, data, ResultFormat.Decimal).Decimal,
                    JumpPenaltyPoints = this.GetResult(indexes, ConverterConstants.INDEX_JUMP_PENALTY, data, ResultFormat.Int).Int,
                };

                var part = this.GetResult(indexes, ConverterConstants.INDEX_ROUND_1, data, ResultFormat.Decimal).Decimal;
                if (part != null)
                {
                    ejpTeam.Parts.Add(new EJPPart { PenaltyPoints = part });
                }

                part = this.GetResult(indexes, ConverterConstants.INDEX_ROUND_2, data, ResultFormat.Decimal).Decimal;
                if (part != null)
                {
                    ejpTeam.Parts.Add(new EJPPart { PenaltyPoints = part });
                }

                round.Teams.Add(ejpTeam);
            }
            else
            {
                var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
                var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == ejpTeam.NOC);
                var horse = this.OlympediaService.FindHorse(row.OuterHtml);
                var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id, nocCacheModel.Id);

                points ??= this.GetResult(indexes, ConverterConstants.INDEX_INDIVIDUAL_POINTS, data, ResultFormat.Decimal).Decimal;

                var equestrian = new EJPEquestrian
                {
                    Id = participant.Id,
                    Code = athleteModel.Code,
                    Name = athleteModel.Name,
                    NOC = nocCode,
                    Horse = horse,
                    FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                    Number = this.GetResult(indexes, ConverterConstants.INDEX_NR, data, ResultFormat.Int).Int,
                    PenaltyPoints = points,
                    Distance = this.GetResult(indexes, ConverterConstants.INDEX_DISTANCE, data, ResultFormat.Decimal).Decimal,
                    Time = this.GetResult(indexes, ConverterConstants.INDEX_TIME, data, ResultFormat.TimeSpan).Time,
                    TimePenaltyPoints = this.GetResult(indexes, ConverterConstants.INDEX_TIME_PENALTY, data, ResultFormat.Int).Int,
                    JumpOff1PenaltyPoints = this.GetResult(indexes, ConverterConstants.INDEX_JUMP_OFF_PENALTY_1, data, ResultFormat.Decimal).Decimal,
                    JumpOffTime = this.GetResult(indexes, ConverterConstants.INDEX_JUMP_OFF_TIME, data, ResultFormat.Decimal).Decimal,
                    JumpPenaltyPoints = this.GetResult(indexes, ConverterConstants.INDEX_JUMP_PENALTY, data, ResultFormat.Int).Int,
                };

                var part = this.GetResult(indexes, ConverterConstants.INDEX_ROUND_1, data, ResultFormat.Decimal).Decimal;
                if (part != null)
                {
                    equestrian.Parts.Add(new EJPPart { PenaltyPoints = part });
                }

                part = this.GetResult(indexes, ConverterConstants.INDEX_ROUND_2, data, ResultFormat.Decimal).Decimal;
                if (part != null)
                {
                    equestrian.Parts.Add(new EJPPart { PenaltyPoints = part });
                }

                ejpTeam.Equestrians.Add(equestrian);
            }
        }
    }

    private void ConvertEJPDocuments(EJPRound round, IOrderedEnumerable<Document> documents, EventCacheModel eventCache)
    {
        foreach (var document in documents)
        {
            var htmlDocument = this.CreateHtmlDocument(document);
            var title = htmlDocument.DocumentNode.SelectSingleNode("//h1").InnerText;
            if (!title.ToLower().Contains("standings"))
            {
                title = title.Replace(eventCache.OriginalName, string.Empty).Replace("â€“", string.Empty).Trim().ToLower();
                var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
                var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
                var indexes = this.OlympediaService.FindIndexes(headers);

                foreach (var row in rows.Skip(1))
                {
                    var data = row.Elements("td").ToList();
                    var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
                    var equstrian = round.Equestrians.FirstOrDefault(x => x.Code == athleteModel.Code);

                    if (equstrian == null)
                    {
                        continue;
                    }
                    var jump = this.GetResult(indexes, ConverterConstants.INDEX_JUMP_PENALTY, data, ResultFormat.Int).Int;
                    var time = this.GetResult(indexes, ConverterConstants.INDEX_TIME_PENALTY, data, ResultFormat.Int).Int;

                    EJPPart part = null;
                    if (title == "round #1" || title == "part #1")
                    {
                        part = equstrian.Parts.ElementAtOrDefault(0);
                    }
                    else if (title == "round #2" || title == "part #2")
                    {
                        part = equstrian.Parts.ElementAtOrDefault(1);
                    }
                    else if (title == "round #3" || title == "part #3")
                    {
                        part = equstrian.Parts.ElementAtOrDefault(2);
                    }

                    if (part != null)
                    {
                        part.JumpPenaltyPoints = jump;
                        part.TimePenaltyPoints = time;
                    }
                }
            }
        }
    }

    private async Task SetEJREquestriansAsync(EJPRound round, HtmlDocument htmlDocument, EventCacheModel eventCache)
    {
        var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);
            var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
            if (nocCacheModel == null)
            {
                continue;
            }
            var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
            var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id, nocCacheModel.Id);
            var horse = this.OlympediaService.FindHorse(row.OuterHtml);

            var points = this.GetResult(indexes, ConverterConstants.INDEX_POINTS, data, ResultFormat.Decimal).Decimal;
            points ??= this.GetResult(indexes, ConverterConstants.INDEX_PENALTY, data, ResultFormat.Decimal).Decimal;

            var equestrian = new EJPEquestrian
            {
                Id = participant.Id,
                Code = athleteModel.Code,
                Name = athleteModel.Name,
                NOC = nocCode,
                Horse = horse,
                FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                Qualification = this.OlympediaService.FindQualification(row.OuterHtml),
                Number = this.GetResult(indexes, ConverterConstants.INDEX_NR, data, ResultFormat.Int).Int,
                PenaltyPoints = points,
                Distance = this.GetResult(indexes, ConverterConstants.INDEX_DISTANCE, data, ResultFormat.Decimal).Decimal,
                Time = this.GetResult(indexes, ConverterConstants.INDEX_TIME, data, ResultFormat.TimeSpan).Time,
                TimePenaltyPoints = this.GetResult(indexes, ConverterConstants.INDEX_TIME_PENALTY, data, ResultFormat.Int).Int,
                JumpOff1PenaltyPoints = this.GetResult(indexes, ConverterConstants.INDEX_JUMP_OFF_PENALTY_1, data, ResultFormat.Decimal).Decimal,
                JumpOff2PenaltyPoints = this.GetResult(indexes, ConverterConstants.INDEX_JUMP_OFF_PENALTY_2, data, ResultFormat.Decimal).Decimal,
                JumpOffTime = this.GetResult(indexes, ConverterConstants.INDEX_JUMP_OFF_TIME, data, ResultFormat.Decimal).Decimal,
                JumpPenaltyPoints = this.GetResult(indexes, ConverterConstants.INDEX_JUMP_PENALTY, data, ResultFormat.Int).Int,
            };

            var part = this.GetResult(indexes, ConverterConstants.INDEX_PART_1, data, ResultFormat.Decimal).Decimal;
            part ??= this.GetResult(indexes, ConverterConstants.INDEX_ROUND_1, data, ResultFormat.Decimal).Decimal;
            if (part != null)
            {
                equestrian.Parts.Add(new EJPPart { PenaltyPoints = part });
            }

            part = this.GetResult(indexes, ConverterConstants.INDEX_PART_2, data, ResultFormat.Decimal).Decimal;
            part ??= this.GetResult(indexes, ConverterConstants.INDEX_ROUND_2, data, ResultFormat.Decimal).Decimal;
            if (part != null)
            {
                equestrian.Parts.Add(new EJPPart { PenaltyPoints = part });
            }

            part = this.GetResult(indexes, ConverterConstants.INDEX_PART_3, data, ResultFormat.Decimal).Decimal;
            part ??= this.GetResult(indexes, ConverterConstants.INDEX_ROUND_3, data, ResultFormat.Decimal).Decimal;
            if (part != null)
            {
                equestrian.Parts.Add(new EJPPart { PenaltyPoints = part });
            }

            round.Equestrians.Add(equestrian);
        }
    }

    private async Task ProcessEquestrianEventing(ConvertOptions options)
    {
        var eventRound = this.CreateEventRound<EVERound>(options.HtmlDocument, options.Event.Name);
        var round = this.CreateRound<EVERound>(eventRound.Dates.From, eventRound.Format, RoundType.Final, eventRound.EventName);

        if (options.Event.IsTeamEvent)
        {
            await this.SetEVETeamsAsync(round, options.StandingTable.HtmlDocument, options.Event);
        }
        else
        {
            await this.SetEVEEquestriansAsync(round, options.StandingTable.HtmlDocument, options.Event);
        }

        eventRound.Rounds.Add(round);
        await this.ProcessJsonAsync(eventRound, options);
    }

    private async Task SetEVETeamsAsync(EVERound round, HtmlDocument htmlDocument, EventCacheModel eventCache)
    {
        var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        EVETeam eveTeam = null;
        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var name = data[indexes[ConverterConstants.INDEX_NAME]].InnerText.Trim();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);

            var points = this.GetResult(indexes, ConverterConstants.INDEX_POINTS, data, ResultFormat.Decimal).Decimal;
            points ??= this.GetResult(indexes, ConverterConstants.INDEX_PENALTY, data, ResultFormat.Decimal).Decimal;

            if (nocCode != null)
            {
                var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
                var team = await this.teamsService.GetAsync(nocCacheModel.Id, eventCache.Id);

                eveTeam = new EVETeam
                {
                    Id = team.Id,
                    Name = name,
                    NOC = nocCode,
                    FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                    Points = points,
                    CrossCountry = this.GetResult(indexes, ConverterConstants.INDEX_CROSS_COUNTRY, data, ResultFormat.Decimal).Decimal,
                    CrossCountry5km = this.GetResult(indexes, ConverterConstants.INDEX_CROSS_COUNTRY_5, data, ResultFormat.Decimal).Decimal,
                    CrossCountry20km = this.GetResult(indexes, ConverterConstants.INDEX_CROSS_COUNTRY_20, data, ResultFormat.Decimal).Decimal,
                    CrossCountry50km = this.GetResult(indexes, ConverterConstants.INDEX_CROSS_COUNTRY_50, data, ResultFormat.Decimal).Decimal,
                    Dressage = this.GetResult(indexes, ConverterConstants.INDEX_DRESSAGE, data, ResultFormat.Decimal).Decimal,
                    Jumping = this.GetResult(indexes, ConverterConstants.INDEX_JUMPING, data, ResultFormat.Decimal).Decimal,
                    JumpingQualification = this.GetResult(indexes, ConverterConstants.INDEX_JUMPING_QUALIFICATION, data, ResultFormat.Decimal).Decimal,
                    Steeplechase = this.GetResult(indexes, ConverterConstants.INDEX_STEEPLECHASE, data, ResultFormat.Decimal).Decimal
                };

                round.Teams.Add(eveTeam);
            }
            else
            {
                var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
                var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == eveTeam.NOC);
                var horse = this.OlympediaService.FindHorse(row.OuterHtml);
                var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id, nocCacheModel.Id);

                var equestrian = new EVEEquestrian
                {
                    Id = participant.Id,
                    Code = athleteModel.Code,
                    Name = athleteModel.Name,
                    NOC = nocCode,
                    Horse = horse,
                    FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                    Points = points,
                    Number = this.GetResult(indexes, ConverterConstants.INDEX_NR, data, ResultFormat.Int).Int,
                    CrossCountry = this.GetResult(indexes, ConverterConstants.INDEX_CROSS_COUNTRY, data, ResultFormat.Decimal).Decimal,
                    CrossCountry5km = this.GetResult(indexes, ConverterConstants.INDEX_CROSS_COUNTRY_5, data, ResultFormat.Decimal).Decimal,
                    CrossCountry20km = this.GetResult(indexes, ConverterConstants.INDEX_CROSS_COUNTRY_20, data, ResultFormat.Decimal).Decimal,
                    CrossCountry50km = this.GetResult(indexes, ConverterConstants.INDEX_CROSS_COUNTRY_50, data, ResultFormat.Decimal).Decimal,
                    Dressage = this.GetResult(indexes, ConverterConstants.INDEX_DRESSAGE, data, ResultFormat.Decimal).Decimal,
                    Jumping = this.GetResult(indexes, ConverterConstants.INDEX_JUMPING, data, ResultFormat.Decimal).Decimal,
                    JumpingQualification = this.GetResult(indexes, ConverterConstants.INDEX_JUMPING_QUALIFICATION, data, ResultFormat.Decimal).Decimal,
                    Steeplechase = this.GetResult(indexes, ConverterConstants.INDEX_STEEPLECHASE, data, ResultFormat.Decimal).Decimal
                };

                eveTeam.Equestrians.Add(equestrian);
            }
        }
    }

    private async Task SetEVEEquestriansAsync(EVERound round, HtmlDocument htmlDocument, EventCacheModel eventCache)
    {
        var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);
            var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
            var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
            var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id, nocCacheModel.Id);
            var horse = this.OlympediaService.FindHorse(row.OuterHtml);

            var points = this.GetResult(indexes, ConverterConstants.INDEX_POINTS, data, ResultFormat.Decimal).Decimal;
            points ??= this.GetResult(indexes, ConverterConstants.INDEX_PENALTY, data, ResultFormat.Decimal).Decimal;

            var equestrian = new EVEEquestrian
            {
                Id = participant.Id,
                Code = athleteModel.Code,
                Name = athleteModel.Name,
                NOC = nocCode,
                Horse = horse,
                FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                Points = points,
                Number = this.GetResult(indexes, ConverterConstants.INDEX_NR, data, ResultFormat.Int).Int,
                CrossCountry = this.GetResult(indexes, ConverterConstants.INDEX_CROSS_COUNTRY, data, ResultFormat.Decimal).Decimal,
                CrossCountry5km = this.GetResult(indexes, ConverterConstants.INDEX_CROSS_COUNTRY_5, data, ResultFormat.Decimal).Decimal,
                CrossCountry20km = this.GetResult(indexes, ConverterConstants.INDEX_CROSS_COUNTRY_20, data, ResultFormat.Decimal).Decimal,
                CrossCountry50km = this.GetResult(indexes, ConverterConstants.INDEX_CROSS_COUNTRY_50, data, ResultFormat.Decimal).Decimal,
                Dressage = this.GetResult(indexes, ConverterConstants.INDEX_DRESSAGE, data, ResultFormat.Decimal).Decimal,
                Jumping = this.GetResult(indexes, ConverterConstants.INDEX_JUMPING, data, ResultFormat.Decimal).Decimal,
                JumpingQualification = this.GetResult(indexes, ConverterConstants.INDEX_JUMPING_QUALIFICATION, data, ResultFormat.Decimal).Decimal,
                Steeplechase = this.GetResult(indexes, ConverterConstants.INDEX_STEEPLECHASE, data, ResultFormat.Decimal).Decimal
            };

            round.Equestrians.Add(equestrian);
        }
    }

    private async Task ProcessEquestrianDriving(ConvertOptions options)
    {
        var eventRound = this.CreateEventRound<EDVRound>(options.HtmlDocument, options.Event.Name);
        var round = this.CreateRound<EDVRound>(eventRound.Dates.From, eventRound.Format, RoundType.Final, eventRound.EventName);

        var rows = options.StandingTable.HtmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);
            var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
            var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
            var participant = await this.participantsService.GetAsync(athleteModel.Code, options.Event.Id, nocCacheModel.Id);

            var equestrian = new EDVEquestrian
            {
                Id = participant.Id,
                Code = athleteModel.Code,
                Name = athleteModel.Name,
                NOC = nocCode,
            };

            round.Equestrians.Add(equestrian);
        }

        eventRound.Rounds.Add(round);
        await this.ProcessJsonAsync(eventRound, options);
    }

    private async Task ProcessEquestrianDressage(ConvertOptions options)
    {
        var eventRound = this.CreateEventRound<EDRRound>(options.HtmlDocument, options.Event.Name);

        if (options.Event.IsTeamEvent)
        {
            if (options.Tables.Any())
            {
                foreach (var table in options.Tables)
                {
                    var format = this.RegExpService.MatchFirstGroup(table.HtmlDocument.DocumentNode.OuterHtml, @"<th>Format<\/th>\s*<td(?:.*?)>(.*?)<\/td>");
                    var dateString = this.RegExpService.MatchFirstGroup(table.HtmlDocument.DocumentNode.OuterHtml, @"<th>\s*Date\s*<\/th>\s*<td>(.*?)<\/td>");
                    var dateModel = this.dateService.ParseDate(dateString);
                    var round = this.CreateRound<EDRRound>(dateModel.From, format, table.Round, eventRound.EventName);
                    round.Judges = await this.SetJudgesAsync(table.HtmlDocument, options.Event);
                    await this.SetEDRTeamsAsync(round, table.HtmlDocument, options.Event, options.Game);
                    eventRound.Rounds.Add(round);
                }
            }
            else
            {
                var round = this.CreateRound<EDRRound>(eventRound.Dates.From, eventRound.Format, RoundType.Final, eventRound.EventName);
                round.Judges = await this.SetJudgesAsync(options.HtmlDocument, options.Event);
                await this.SetEDRTeamsAsync(round, options.StandingTable.HtmlDocument, options.Event, options.Game);
                eventRound.Rounds.Add(round);
            }
        }
        else
        {
            if (options.Tables.Any())
            {
                foreach (var table in options.Tables)
                {
                    var format = this.RegExpService.MatchFirstGroup(table.HtmlDocument.DocumentNode.OuterHtml, @"<th>Format<\/th>\s*<td(?:.*?)>(.*?)<\/td>");
                    var round = this.CreateRound<EDRRound>(table.FromDate, format, table.Round, eventRound.EventName);
                    round.Judges = await this.SetJudgesAsync(table.HtmlDocument, options.Event);
                    var heats = this.SplitHeats(table);
                    if (heats.Any())
                    {
                        foreach (var heat in heats)
                        {
                            var group = this.NormalizeService.MapGroupType(heat.Title);
                            await this.SetEDREquestriansAsync(round, heat.HtmlDocument, options.Event, group, true);
                        }
                    }
                    else
                    {
                        await this.SetEDREquestriansAsync(round, table.HtmlDocument, options.Event, GroupType.None, false);
                    }

                    var results = this.OlympediaService.FindResults(table.HtmlDocument.DocumentNode.OuterHtml);
                    this.ConvertEDRDocuments(round, options.Documents, options.Event, results);
                    eventRound.Rounds.Add(round);
                }
            }
            else
            {
                var round = this.CreateRound<EDRRound>(eventRound.Dates.From, eventRound.Format, RoundType.Final, eventRound.EventName);
                round.Judges = await this.SetJudgesAsync(options.HtmlDocument, options.Event);
                await this.SetEDREquestriansAsync(round, options.StandingTable.HtmlDocument, options.Event, GroupType.None, false);
                this.ConvertEDRDocuments(round, options.Documents, options.Event, options.Documents.Select(x => int.Parse(x.Url.Split("/").Last())).ToList());
                eventRound.Rounds.Add(round);
            }
        }

        await this.ProcessJsonAsync(eventRound, options);
    }

    private async Task SetEDRTeamsAsync(EDRRound round, HtmlDocument htmlDocument, EventCacheModel eventCache, GameCacheModel gameCache)
    {
        var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        EDRTeam edrTeam = null;
        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var name = data[indexes[ConverterConstants.INDEX_NAME]].InnerText.Trim();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);
            if (nocCode != null)
            {
                var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
                var team = await this.teamsService.GetAsync(nocCacheModel.Id, eventCache.Id);

                edrTeam = new EDRTeam
                {
                    Id = team.Id,
                    Name = name,
                    NOC = nocCode,
                    FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                    Points = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value1) ? this.RegExpService.MatchDecimal(data[value1].InnerText) : null
                };

                round.Teams.Add(edrTeam);
            }
            else
            {
                var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
                var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == edrTeam.NOC);
                var horse = this.OlympediaService.FindHorse(row.OuterHtml);

                var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id, nocCacheModel.Id);
                var points = indexes.TryGetValue(ConverterConstants.INDEX_INDIVIDUAL_POINTS, out int value1) ? this.RegExpService.MatchDecimal(data[value1].InnerText) : null;
                points ??= indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value2) ? this.RegExpService.MatchDecimal(data[value2].InnerText) : null;

                var equestrian = new EDREquestrian
                {
                    Id = participant.Id,
                    Code = athleteModel.Code,
                    Name = athleteModel.Name,
                    NOC = nocCode,
                    Points = points,
                    Horse = horse
                };

                if (gameCache.Year == 2020)
                {
                    equestrian.Scores.Add(new EDRScore { Judge = "Judge K", Points = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_1_POINTS, out int value11) ? this.RegExpService.MatchDecimal(data[value11].InnerText) : null });
                    equestrian.Scores.Add(new EDRScore { Judge = "Judge E", Points = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_2_POINTS, out int value12) ? this.RegExpService.MatchDecimal(data[value12].InnerText) : null });
                    equestrian.Scores.Add(new EDRScore { Judge = "Judge H", Points = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_3_POINTS, out int value13) ? this.RegExpService.MatchDecimal(data[value13].InnerText) : null });
                    equestrian.Scores.Add(new EDRScore { Judge = "Judge C", Points = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_4_POINTS, out int value14) ? this.RegExpService.MatchDecimal(data[value14].InnerText) : null });
                    equestrian.Scores.Add(new EDRScore { Judge = "Judge M", Points = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_5_POINTS, out int value15) ? this.RegExpService.MatchDecimal(data[value15].InnerText) : null });
                    equestrian.Scores.Add(new EDRScore { Judge = "Judge B", Points = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_6_POINTS, out int value16) ? this.RegExpService.MatchDecimal(data[value16].InnerText) : null });
                    equestrian.Scores.Add(new EDRScore { Judge = "Judge F", Points = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_7_POINTS, out int value17) ? this.RegExpService.MatchDecimal(data[value17].InnerText) : null });
                }

                edrTeam.Equestrians.Add(equestrian);
            }
        }
    }

    private void ConvertEDRDocuments(EDRRound round, IOrderedEnumerable<Document> documents, EventCacheModel eventCache, IList<int> results)
    {
        foreach (var result in results)
        {
            var document = documents.FirstOrDefault(x => x.Url.EndsWith($"{result}"));
            if (document != null)
            {
                var htmlDocument = this.CreateHtmlDocument(document);
                var title = htmlDocument.DocumentNode.SelectSingleNode("//h1").InnerText;
                if (!title.ToLower().Contains("summary"))
                {
                    title = title.Replace(eventCache.OriginalName, string.Empty).Replace("â€“", string.Empty).Trim();

                    var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
                    var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
                    var indexes = this.OlympediaService.FindIndexes(headers);

                    foreach (var row in rows.Skip(1))
                    {
                        var data = row.Elements("td").ToList();
                        var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
                        var equstrian = round.Equestrians.FirstOrDefault(x => x.Code == athleteModel.Code);

                        var score = new EDRScore
                        {
                            Judge = title,
                            Points = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value1) ? this.RegExpService.MatchDecimal(data[value1].InnerText) : null,
                            ArtisticPoints = indexes.TryGetValue(ConverterConstants.INDEX_ARTISTIC_POINTS, out int value3) ? this.RegExpService.MatchDecimal(data[value3].InnerText) : null,
                            PercentagePoints = indexes.TryGetValue(ConverterConstants.INDEX_PERCENTAGE_POINTS, out int value6) ? this.RegExpService.MatchDecimal(data[value6].InnerText) : null,
                            RawPoints = indexes.TryGetValue(ConverterConstants.INDEX_RAW_POINTS, out int value7) ? this.RegExpService.MatchDecimal(data[value7].InnerText) : null,
                            TechnicalPoints = indexes.TryGetValue(ConverterConstants.INDEX_TECHNICAL_POINTS, out int value9) ? this.RegExpService.MatchDecimal(data[value9].InnerText) : null,
                        };

                        equstrian.Scores.Add(score);
                    }
                }
            }
        }
    }

    private async Task SetEDREquestriansAsync(EDRRound round, HtmlDocument htmlDocument, EventCacheModel eventCache, GroupType group, bool isJudge)
    {
        var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);
            var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
            var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
            var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id, nocCacheModel.Id);
            var horse = this.OlympediaService.FindHorse(row.OuterHtml);

            var equestrian = new EDREquestrian
            {
                Id = participant.Id,
                Code = athleteModel.Code,
                Name = athleteModel.Name,
                NOC = nocCode,
                Horse = horse,
                FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                Qualification = this.OlympediaService.FindQualification(row.OuterHtml),
                Group = group,
                Points = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value1) ? this.RegExpService.MatchDecimal(data[value1].InnerText) : null,
                AdjustedPoints = indexes.TryGetValue(ConverterConstants.INDEX_ADJUSTED_POINTS, out int value2) ? this.RegExpService.MatchDecimal(data[value2].InnerText) : null,
                ArtisticPoints = indexes.TryGetValue(ConverterConstants.INDEX_ARTISTIC_POINTS, out int value3) ? this.RegExpService.MatchDecimal(data[value3].InnerText) : null,
                FreestylePoints = indexes.TryGetValue(ConverterConstants.INDEX_FREESTYLE, out int value4) ? this.RegExpService.MatchDecimal(data[value4].InnerText) : null,
                Ordinals = indexes.TryGetValue(ConverterConstants.INDEX_ORDINALS, out int value5) ? this.RegExpService.MatchDecimal(data[value5].InnerText) : null,
                PercentagePoints = indexes.TryGetValue(ConverterConstants.INDEX_PERCENTAGE_POINTS, out int value6) ? this.RegExpService.MatchDecimal(data[value6].InnerText) : null,
                RawPoints = indexes.TryGetValue(ConverterConstants.INDEX_RAW_POINTS, out int value7) ? this.RegExpService.MatchDecimal(data[value7].InnerText) : null,
                SpecialPoints = indexes.TryGetValue(ConverterConstants.INDEX_SPECIAL_POINTS, out int value8) ? this.RegExpService.MatchDecimal(data[value8].InnerText) : null,
                TechnicalPoints = indexes.TryGetValue(ConverterConstants.INDEX_TECHNICAL_POINTS, out int value9) ? this.RegExpService.MatchDecimal(data[value9].InnerText) : null,
            };

            if (isJudge)
            {
                equestrian.Scores.Add(new EDRScore { Judge = "Judge K", Points = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_1_POINTS, out int value11) ? this.RegExpService.MatchDecimal(data[value11].InnerText) : null });
                equestrian.Scores.Add(new EDRScore { Judge = "Judge E", Points = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_2_POINTS, out int value12) ? this.RegExpService.MatchDecimal(data[value12].InnerText) : null });
                equestrian.Scores.Add(new EDRScore { Judge = "Judge H", Points = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_3_POINTS, out int value13) ? this.RegExpService.MatchDecimal(data[value13].InnerText) : null });
                equestrian.Scores.Add(new EDRScore { Judge = "Judge C", Points = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_4_POINTS, out int value14) ? this.RegExpService.MatchDecimal(data[value14].InnerText) : null });
                equestrian.Scores.Add(new EDRScore { Judge = "Judge M", Points = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_5_POINTS, out int value15) ? this.RegExpService.MatchDecimal(data[value15].InnerText) : null });
                equestrian.Scores.Add(new EDRScore { Judge = "Judge B", Points = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_6_POINTS, out int value16) ? this.RegExpService.MatchDecimal(data[value16].InnerText) : null });
                equestrian.Scores.Add(new EDRScore { Judge = "Judge F", Points = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_7_POINTS, out int value17) ? this.RegExpService.MatchDecimal(data[value17].InnerText) : null });
            }

            round.Equestrians.Add(equestrian);
        }
    }
    #endregion EQUESTRIAN

    #region DIVING
    private async Task ProcessDivingAsync(ConvertOptions options)
    {
        var eventRound = this.CreateEventRound<DIVRound>(options.HtmlDocument, options.Event.Name);

        if (options.Event.IsTeamEvent)
        {
            var round = this.CreateRound<DIVRound>(eventRound.Dates.From, eventRound.Format, RoundType.FinalRound, eventRound.EventName);
            round.Judges = await this.SetJudgesAsync(options.HtmlDocument, options.Event);
            await this.SetDIVPairsAsync(round, options.StandingTable.HtmlDocument, options.Event);
            this.ConvertDIVPairsDocumentsAsync(round, options.Documents, options.Event);
            eventRound.Rounds.Add(round);
        }
        else
        {
            if (options.Tables.Any())
            {
                foreach (var table in options.Tables)
                {
                    var round = this.CreateRound<DIVRound>(table.FromDate, eventRound.Format, table.Round, eventRound.EventName);
                    round.Judges = await this.SetJudgesAsync(table.HtmlDocument, options.Event);

                    var heats = this.SplitHeats(table);
                    if (heats.Any())
                    {
                        foreach (var heat in heats)
                        {
                            var group = this.NormalizeService.MapGroupType(heat.Title);
                            await this.SetDIVDiversAsync(round, heat.HtmlDocument, options.Event, group);
                        }
                    }
                    else
                    {
                        await this.SetDIVDiversAsync(round, table.HtmlDocument, options.Event, GroupType.None);
                    }

                    var results = this.OlympediaService.FindResults(table.Html);
                    this.ConvertDIVDocuments(round, options.Documents, options.Event, results);
                    eventRound.Rounds.Add(round);
                }
            }
            else
            {
                var round = this.CreateRound<DIVRound>(eventRound.Dates.From, eventRound.Format, RoundType.FinalRound, eventRound.EventName);
                round.Judges = await this.SetJudgesAsync(options.HtmlDocument, options.Event);
                await this.SetDIVDiversAsync(round, options.StandingTable.HtmlDocument, options.Event, GroupType.None);
                var results = this.OlympediaService.FindResults(options.HtmlDocument.ParsedText);
                this.ConvertDIVDocuments(round, options.Documents, options.Event, results);
                eventRound.Rounds.Add(round);
            }
        }

        await this.ProcessJsonAsync(eventRound, options);
    }

    private void ConvertDIVPairsDocumentsAsync(DIVRound round, IOrderedEnumerable<Document> documents, EventCacheModel eventCache)
    {
        foreach (var document in documents)
        {
            var htmlDocument = this.CreateHtmlDocument(document);
            var title = htmlDocument.DocumentNode.SelectSingleNode("//h1").InnerText;
            if (!title.ToLower().Contains("summary after"))
            {
                title = title.Replace(eventCache.OriginalName, string.Empty).Replace("â€“", string.Empty).Trim();
                var table = this.GetStandingTable(htmlDocument, eventCache);
                var parts = title.Split(new[] { "," }, StringSplitOptions.RemoveEmptyEntries).ToList();
                var roundType = this.NormalizeService.MapRoundType(parts.FirstOrDefault());
                var section = parts.LastOrDefault().Trim();
                var diveNumber = this.RegExpService.MatchInt(section);

                var rows = table.HtmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
                var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
                var indexes = this.OlympediaService.FindIndexes(headers);

                foreach (var row in rows.Skip(1))
                {
                    var data = row.Elements("td").ToList();
                    var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);

                    if (nocCode != null)
                    {
                        var pair = round.Pairs.FirstOrDefault(x => x.NOC == nocCode);
                        var dive = new DIVDive
                        {
                            Number = diveNumber.Value,
                            Points = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value1) ? this.RegExpService.MatchDecimal(data[value1].InnerText) : null,
                            Difficulty = indexes.TryGetValue(ConverterConstants.INDEX_DIFFICULTY, out int value2) ? this.RegExpService.MatchDecimal(data[value2].InnerText) : null,
                            Name = indexes.TryGetValue(ConverterConstants.INDEX_DIVE, out int value3) ? data[value3].InnerText : null,
                            Ordinals = indexes.TryGetValue(ConverterConstants.INDEX_ORDINALS, out int value4) ? this.RegExpService.MatchDecimal(data[value4].InnerText) : null,
                            SynchronizationJudge1Score = indexes.TryGetValue(ConverterConstants.INDEX_SYNCHRONIZATION_JUDGE_1_SCORE, out int value5) ? this.RegExpService.MatchDecimal(data[value5].InnerText) : null,
                            SynchronizationJudge2Score = indexes.TryGetValue(ConverterConstants.INDEX_SYNCHRONIZATION_JUDGE_2_SCORE, out int value6) ? this.RegExpService.MatchDecimal(data[value6].InnerText) : null,
                            SynchronizationJudge3Score = indexes.TryGetValue(ConverterConstants.INDEX_SYNCHRONIZATION_JUDGE_3_SCORE, out int value7) ? this.RegExpService.MatchDecimal(data[value7].InnerText) : null,
                            SynchronizationJudge4Score = indexes.TryGetValue(ConverterConstants.INDEX_SYNCHRONIZATION_JUDGE_4_SCORE, out int value8) ? this.RegExpService.MatchDecimal(data[value8].InnerText) : null,
                            SynchronizationJudge5Score = indexes.TryGetValue(ConverterConstants.INDEX_SYNCHRONIZATION_JUDGE_5_SCORE, out int value9) ? this.RegExpService.MatchDecimal(data[value9].InnerText) : null,
                            ExecutionJudge1Score = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_1_POINTS, out int value11) ? this.RegExpService.MatchDecimal(data[value11].InnerText) : null,
                            ExecutionJudge2Score = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_2_POINTS, out int value12) ? this.RegExpService.MatchDecimal(data[value12].InnerText) : null,
                            ExecutionJudge3Score = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_3_POINTS, out int value13) ? this.RegExpService.MatchDecimal(data[value13].InnerText) : null,
                            ExecutionJudge4Score = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_4_POINTS, out int value14) ? this.RegExpService.MatchDecimal(data[value14].InnerText) : null,
                            ExecutionJudge5Score = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_5_POINTS, out int value15) ? this.RegExpService.MatchDecimal(data[value15].InnerText) : null,
                            ExecutionJudge6Score = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_6_POINTS, out int value16) ? this.RegExpService.MatchDecimal(data[value16].InnerText) : null,
                            ExecutionJudge7Score = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_7_POINTS, out int value17) ? this.RegExpService.MatchDecimal(data[value17].InnerText) : null,
                        };

                        pair.Dives.Add(dive);
                    }
                }
            }
        }
    }

    private async Task SetDIVPairsAsync(DIVRound round, HtmlDocument htmlDocument, EventCacheModel eventCache)
    {
        var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        DIVPair pair = null;
        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var name = data[indexes[ConverterConstants.INDEX_NAME]].InnerText.Trim();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);
            if (nocCode != null)
            {
                var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
                var team = await this.teamsService.GetAsync(nocCacheModel.Id, eventCache.Id);

                pair = new DIVPair
                {
                    Id = team.Id,
                    Name = name,
                    NOC = nocCode,
                    FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                    Points = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value1) ? this.RegExpService.MatchDecimal(data[value1].InnerText) : null
                };

                round.Pairs.Add(pair);
            }
            else
            {
                var athleteModels = this.OlympediaService.FindAthletes(row.OuterHtml);
                var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == pair.NOC);

                foreach (var athleteModel in athleteModels)
                {
                    var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id, nocCacheModel.Id);

                    var diver = new DIVDiver
                    {
                        Id = participant.Id,
                        Code = athleteModel.Code,
                        Name = athleteModel.Name,
                        NOC = nocCode,
                    };

                    pair.Divers.Add(diver);
                }
            }
        }
    }

    private void ConvertDIVDocuments(DIVRound round, IOrderedEnumerable<Document> documents, EventCacheModel eventCache, IList<int> results)
    {
        foreach (var result in results)
        {
            var document = documents.FirstOrDefault(x => x.Url.EndsWith($"{result}"));
            if (document != null)
            {
                var htmlDocument = this.CreateHtmlDocument(document);
                var title = htmlDocument.DocumentNode.SelectSingleNode("//h1").InnerText;
                if (!title.ToLower().Contains("summary after"))
                {
                    title = title.Replace(eventCache.OriginalName, string.Empty).Replace("â€“", string.Empty).Trim();
                    var parts = title.Split(new[] { "," }, StringSplitOptions.RemoveEmptyEntries).ToList();
                    var roundType = this.NormalizeService.MapRoundType(parts.FirstOrDefault());
                    var section = parts.LastOrDefault().Trim();

                    if (roundType == RoundType.None)
                    {
                        roundType = RoundType.FinalRound;
                    }

                    var table = this.GetStandingTable(htmlDocument, eventCache);

                    if (section.StartsWith("Judge"))
                    {
                        var judgeNumber = this.RegExpService.MatchInt(section);
                        this.ConvertDIVJudges(round, table, judgeNumber.Value);
                    }
                    else if (section.StartsWith("Dive"))
                    {
                        var diveNumber = this.RegExpService.MatchInt(section);
                        this.ConvertDIVDives(round, table, diveNumber.Value);
                    }
                }
            }
        }
    }

    private void ConvertDIVJudges(DIVRound round, TableModel table, int number)
    {
        var rows = table.HtmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
            var diver = round.Divers.FirstOrDefault(x => x.Code == athleteModel.Code);


            var dive = diver.Dives.FirstOrDefault();
            if (dive == null)
            {
                diver.Dives.Add(new DIVDive { Number = 1 });
                dive = diver.Dives.FirstOrDefault();
            }

            switch (number)
            {
                case 1:
                    dive.ExecutionJudge1Score = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value1) ? this.RegExpService.MatchDecimal(data[value1].InnerText) : null;
                    break;
                case 2:
                    dive.ExecutionJudge2Score = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value2) ? this.RegExpService.MatchDecimal(data[value2].InnerText) : null;
                    break;
                case 3:
                    dive.ExecutionJudge3Score = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value3) ? this.RegExpService.MatchDecimal(data[value3].InnerText) : null;
                    break;
                case 4:
                    dive.ExecutionJudge4Score = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value4) ? this.RegExpService.MatchDecimal(data[value4].InnerText) : null;
                    break;
                case 5:
                    dive.ExecutionJudge5Score = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value5) ? this.RegExpService.MatchDecimal(data[value5].InnerText) : null;
                    break;
            }
        }
    }

    private void ConvertDIVDives(DIVRound round, TableModel table, int number)
    {
        var rows = table.HtmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
            var diver = round.Divers.FirstOrDefault(x => x.Code == athleteModel.Code);

            var dive = new DIVDive
            {
                Number = number,
                Points = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value1) ? this.RegExpService.MatchDecimal(data[value1].InnerText) : null,
                Difficulty = indexes.TryGetValue(ConverterConstants.INDEX_DIFFICULTY, out int value2) ? this.RegExpService.MatchDecimal(data[value2].InnerText) : null,
                Name = indexes.TryGetValue(ConverterConstants.INDEX_DIVE, out int value3) ? data[value3].InnerText : null,
                Ordinals = indexes.TryGetValue(ConverterConstants.INDEX_ORDINALS, out int value4) ? this.RegExpService.MatchDecimal(data[value4].InnerText) : null,
                SynchronizationJudge1Score = indexes.TryGetValue(ConverterConstants.INDEX_SYNCHRONIZATION_JUDGE_1_SCORE, out int value5) ? this.RegExpService.MatchDecimal(data[value5].InnerText) : null,
                SynchronizationJudge2Score = indexes.TryGetValue(ConverterConstants.INDEX_SYNCHRONIZATION_JUDGE_2_SCORE, out int value6) ? this.RegExpService.MatchDecimal(data[value6].InnerText) : null,
                SynchronizationJudge3Score = indexes.TryGetValue(ConverterConstants.INDEX_SYNCHRONIZATION_JUDGE_3_SCORE, out int value7) ? this.RegExpService.MatchDecimal(data[value7].InnerText) : null,
                SynchronizationJudge4Score = indexes.TryGetValue(ConverterConstants.INDEX_SYNCHRONIZATION_JUDGE_4_SCORE, out int value8) ? this.RegExpService.MatchDecimal(data[value8].InnerText) : null,
                SynchronizationJudge5Score = indexes.TryGetValue(ConverterConstants.INDEX_SYNCHRONIZATION_JUDGE_5_SCORE, out int value9) ? this.RegExpService.MatchDecimal(data[value9].InnerText) : null,
                ExecutionJudge1Score = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_1_POINTS, out int value11) ? this.RegExpService.MatchDecimal(data[value11].InnerText) : null,
                ExecutionJudge2Score = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_2_POINTS, out int value12) ? this.RegExpService.MatchDecimal(data[value12].InnerText) : null,
                ExecutionJudge3Score = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_3_POINTS, out int value13) ? this.RegExpService.MatchDecimal(data[value13].InnerText) : null,
                ExecutionJudge4Score = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_4_POINTS, out int value14) ? this.RegExpService.MatchDecimal(data[value14].InnerText) : null,
                ExecutionJudge5Score = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_5_POINTS, out int value15) ? this.RegExpService.MatchDecimal(data[value15].InnerText) : null,
                ExecutionJudge6Score = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_6_POINTS, out int value16) ? this.RegExpService.MatchDecimal(data[value16].InnerText) : null,
                ExecutionJudge7Score = indexes.TryGetValue(ConverterConstants.INDEX_EXECUTION_JUDGE_7_POINTS, out int value17) ? this.RegExpService.MatchDecimal(data[value17].InnerText) : null,
            };

            diver.Dives.Add(dive);
        }
    }

    private async Task SetDIVDiversAsync(DIVRound round, HtmlDocument htmlDocument, EventCacheModel eventCache, GroupType group)
    {
        var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);
            var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
            var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
            var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id, nocCacheModel.Id);

            var diver = new DIVDiver
            {
                Id = participant.Id,
                Code = athleteModel.Code,
                Name = athleteModel.Name,
                NOC = nocCode,
                FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                Qualification = this.OlympediaService.FindQualification(row.OuterHtml),
                Group = group,
                Order = indexes.TryGetValue(ConverterConstants.INDEX_ORDER, out int value1) ? this.RegExpService.MatchInt(data[value1].InnerText) : null,
                Points = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value2) ? this.RegExpService.MatchDecimal(data[value2].InnerText) : null,
                CompulsoryPoints = indexes.TryGetValue(ConverterConstants.INDEX_COMPULSORY_EXERCISES_POINTS, out int value3) ? this.RegExpService.MatchDecimal(data[value3].InnerText) : null,
                FinalPoints = indexes.TryGetValue(ConverterConstants.INDEX_FINAL_POINTS, out int value4) ? this.RegExpService.MatchDecimal(data[value4].InnerText) : null,
                QualificationPoints = indexes.TryGetValue(ConverterConstants.INDEX_QUALIFICATION_POINTS, out int value5) ? this.RegExpService.MatchDecimal(data[value5].InnerText) : null,
                SemiFinalsPoints = indexes.TryGetValue(ConverterConstants.INDEX_SEMI_FINALS_POINTS, out int value6) ? this.RegExpService.MatchDecimal(data[value6].InnerText) : null,
                Ordinals = indexes.TryGetValue(ConverterConstants.INDEX_ORDINALS, out int value7) ? this.RegExpService.MatchDecimal(data[value7].InnerText) : null,
            };

            round.Divers.Add(diver);
        }
    }
    #endregion DIVING

    #region CYCLING
    private async Task ProcessCyclingTrackAsync(ConvertOptions options)
    {
        var eventRound = this.CreateEventRound<CTRRound>(options.HtmlDocument, options.Event.Name);

        if (options.Event.IsTeamEvent)
        {
            if (!options.Tables.Any())
            {
                var round = this.CreateRound<CTRRound>(eventRound.Dates.From, eventRound.Format, RoundType.Final, eventRound.EventName);
                await this.SetCTRTeamsAsync(round, options.StandingTable.HtmlDocument, options.Event, HeatType.None);
                eventRound.Rounds.Add(round);
            }
            else
            {
                foreach (var table in options.Tables)
                {
                    var round = this.CreateRound<CTRRound>(eventRound.Dates.From, eventRound.Format, table.Round, eventRound.EventName);

                    var heats = this.SplitHeats(table);
                    if (heats.Any())
                    {
                        foreach (var heat in heats)
                        {
                            var heatType = this.NormalizeService.MapHeats(heat.Title);
                            await this.SetCTRTeamsAsync(round, heat.HtmlDocument, options.Event, heatType);
                        }
                    }
                    else
                    {
                        await this.SetCTRTeamsAsync(round, table.HtmlDocument, options.Event, HeatType.None);
                    }

                    eventRound.Rounds.Add(round);
                }
            }
        }
        else
        {
            if (!options.Tables.Any() || eventRound.EventName == "Course De Primes")
            {
                var round = this.CreateRound<CTRRound>(eventRound.Dates.From, eventRound.Format, RoundType.Final, eventRound.EventName);
                await this.SetCTRCyclistsAsync(round, options.StandingTable.HtmlDocument, options.Event, HeatType.None);
                eventRound.Rounds.Add(round);
            }
            else
            {
                foreach (var table in options.Tables)
                {
                    var round = this.CreateRound<CTRRound>(eventRound.Dates.From, eventRound.Format, table.Round, eventRound.EventName);

                    var heats = this.SplitHeats(table);
                    if (heats.Any())
                    {
                        foreach (var heat in heats)
                        {
                            var heatType = this.NormalizeService.MapHeats(heat.Title);
                            await this.SetCTRCyclistsAsync(round, heat.HtmlDocument, options.Event, heatType);
                        }
                    }
                    else
                    {
                        await this.SetCTRCyclistsAsync(round, table.HtmlDocument, options.Event, HeatType.None);
                    }

                    eventRound.Rounds.Add(round);
                }
            }
        }

        await this.ProcessJsonAsync(eventRound, options);
    }

    private async Task SetCTRTeamsAsync(CTRRound round, HtmlDocument htmlDocument, EventCacheModel eventCache, HeatType heat)
    {
        var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        CTRTeam ctrTeam = null;
        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var name = data[indexes[ConverterConstants.INDEX_NAME]].InnerText.Trim();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);
            if (nocCode != null)
            {
                var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
                var team = await this.teamsService.GetAsync(nocCacheModel.Id, eventCache.Id);

                ctrTeam = new CTRTeam
                {
                    Id = team.Id,
                    Name = name,
                    NOC = nocCode,
                    FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                    Qualification = this.OlympediaService.FindQualification(row.OuterHtml),
                    Record = this.OlympediaService.FindRecord(row.OuterHtml),
                    Heat = heat,
                    Time = indexes.TryGetValue(ConverterConstants.INDEX_TIME, out int value2) ? this.dateService.ParseTime(data[value2].InnerText) : null,
                    Margin = indexes.TryGetValue(ConverterConstants.INDEX_MARGIN, out int value5) ? data[value5].InnerText : null,
                    Points = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value6) ? this.RegExpService.MatchInt(data[value6].InnerText) : null,
                    Wins = indexes.TryGetValue(ConverterConstants.INDEX_RACES_WON, out int value7) ? this.RegExpService.MatchInt(data[value7].InnerText) : null,
                };

                round.Teams.Add(ctrTeam);
            }
            else
            {
                var athleteModels = this.OlympediaService.FindAthletes(row.OuterHtml);
                var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == ctrTeam.NOC);

                foreach (var athleteModel in athleteModels)
                {
                    var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id, nocCacheModel.Id);

                    var cyclist = new CTRCyclist
                    {
                        Id = participant.Id,
                        Code = athleteModel.Code,
                        Name = athleteModel.Name,
                        NOC = nocCode,
                    };

                    ctrTeam.Cyclists.Add(cyclist);
                }
            }
        }
    }

    private async Task SetCTRCyclistsAsync(CTRRound round, HtmlDocument htmlDocument, EventCacheModel eventCache, HeatType heat)
    {
        var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);
            var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
            var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
            var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id);

            var cyclist = new CTRCyclist
            {
                Id = participant != null ? participant.Id : Guid.Empty,
                Code = athleteModel.Code,
                Name = athleteModel.Name,
                NOC = nocCode,
                FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                Qualification = this.OlympediaService.FindQualification(row.OuterHtml),
                Heat = heat,
                Number = indexes.TryGetValue(ConverterConstants.INDEX_NR, out int value1) ? this.RegExpService.MatchInt(data[value1].InnerText) : null,
                Time = indexes.TryGetValue(ConverterConstants.INDEX_TIME, out int value2) ? this.dateService.ParseTime(data[value2].InnerText) : null,
                SprintTime = indexes.TryGetValue(ConverterConstants.INDEX_SPRINT_TIME, out int value3) ? this.dateService.ParseTime(data[value3].InnerText) : null,
                LapMargin = indexes.TryGetValue(ConverterConstants.INDEX_LAP_MARGIN, out int value4) ? data[value4].InnerText : null,
                Margin = indexes.TryGetValue(ConverterConstants.INDEX_MARGIN, out int value5) ? data[value5].InnerText : null,
                Points = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value6) ? this.RegExpService.MatchDecimal(data[value6].InnerText) : null,
                Wins = indexes.TryGetValue(ConverterConstants.INDEX_RACES_WON, out int value7) ? this.RegExpService.MatchInt(data[value7].InnerText) : null,
                Race1 = indexes.TryGetValue(ConverterConstants.INDEX_RACE_1, out int value8) ? this.dateService.ParseTime(data[value8].InnerText) : null,
                Race2 = indexes.TryGetValue(ConverterConstants.INDEX_RACE_2, out int value9) ? this.dateService.ParseTime(data[value9].InnerText) : null,
                Race3 = indexes.TryGetValue(ConverterConstants.INDEX_RACE_3, out int value10) ? this.dateService.ParseTime(data[value10].InnerText) : null,
                EliminationRacePoints = indexes.TryGetValue(ConverterConstants.INDEX_ELIMINATION_RACE_POINTS, out int value11) ? this.RegExpService.MatchInt(data[value11].InnerText) : null,
                FlyingStartPoints = indexes.TryGetValue(ConverterConstants.INDEX_FLYING_START_POINTS, out int value12) ? this.RegExpService.MatchInt(data[value12].InnerText) : null,
                IndividualPursuitPoints = indexes.TryGetValue(ConverterConstants.INDEX_INDIVIDUAL_PURSUIT_POINTS, out int value13) ? this.RegExpService.MatchInt(data[value13].InnerText) : null,
                PointRacePoints = indexes.TryGetValue(ConverterConstants.INDEX_POINTS_RACE, out int value14) ? this.RegExpService.MatchInt(data[value14].InnerText) : null,
                ScratchPoints = indexes.TryGetValue(ConverterConstants.INDEX_SCRATCH_POINTS, out int value15) ? this.RegExpService.MatchInt(data[value15].InnerText) : null,
                TimeTrialPoints = indexes.TryGetValue(ConverterConstants.INDEX_TIME_TRIAL_POINTS, out int value16) ? this.RegExpService.MatchInt(data[value16].InnerText) : null,
            };

            round.Cyclists.Add(cyclist);
        }
    }

    private async Task ProcessCyclingRoadAsync(ConvertOptions options)
    {
        var eventRound = this.CreateEventRound<CRDRound>(options.HtmlDocument, options.Event.Name);

        var round = this.CreateRound<CRDRound>(eventRound.Dates.From, eventRound.Format, RoundType.Final, eventRound.EventName);
        round.Road = this.SetCRDRoad(options.HtmlDocument);

        if (options.Event.IsTeamEvent)
        {
            await this.SetCRDTeamsAsync(round, options.StandingTable.HtmlDocument, options.Event);
        }
        else
        {
            await this.SetCRDCyclistsAsync(round, options.StandingTable.HtmlDocument, options.Event);
        }

        eventRound.Rounds.Add(round);

        await this.ProcessJsonAsync(eventRound, options);
    }

    private async Task SetCRDTeamsAsync(CRDRound round, HtmlDocument htmlDocument, EventCacheModel eventCache)
    {
        var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        CRDTeam crdTeam = null;
        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var name = data[indexes[ConverterConstants.INDEX_NAME]].InnerText.Trim();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);
            if (nocCode != null)
            {
                var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
                var team = await this.teamsService.GetAsync(nocCacheModel.Id, eventCache.Id);

                crdTeam = new CRDTeam
                {
                    Id = team.Id,
                    Name = name,
                    NOC = nocCode,
                    FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                    Points = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value1) ? this.RegExpService.MatchInt(data[value1].InnerText) : null,
                    Time = indexes.TryGetValue(ConverterConstants.INDEX_TIME, out int value2) ? this.dateService.ParseTime(data[value2].InnerText) : null
                };

                round.Teams.Add(crdTeam);
            }
            else
            {
                var athleteModels = this.OlympediaService.FindAthletes(row.OuterHtml);
                var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == crdTeam.NOC);

                foreach (var athleteModel in athleteModels)
                {
                    var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id, nocCacheModel.Id);

                    var cyclist = new CRDCyclist
                    {
                        Id = participant.Id,
                        Code = athleteModel.Code,
                        Name = athleteModel.Name,
                        NOC = nocCode,
                    };

                    crdTeam.Cyclists.Add(cyclist);
                }
            }
        }
    }

    private async Task SetCRDCyclistsAsync(CRDRound round, HtmlDocument htmlDocument, EventCacheModel eventCache)
    {
        var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);
            var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
            var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
            if (athleteModel == null)
            {
                continue;
            }
            var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id);

            var margin = indexes.TryGetValue(ConverterConstants.INDEX_MARGIN, out int value1) ? this.dateService.ParseTime(data[value1].InnerText) : null;
            var timeText = indexes.TryGetValue(ConverterConstants.INDEX_TIME, out int value2) ? data[value2].InnerText : null;

            TimeSpan? time = null;
            if (timeText.Trim() == "same time")
            {
                time = round.Cyclists.LastOrDefault().Time;
            }
            else if (timeText.Trim().StartsWith("at"))
            {
                margin = this.dateService.ParseTime(timeText);
                time = round.Cyclists.FirstOrDefault().Time + margin;
            }
            else
            {
                time = this.dateService.ParseTime(timeText);
            }

            if (margin != null && time == null)
            {
                time = round.Cyclists.FirstOrDefault().Time + margin;
            }

            var cyclist = new CRDCyclist
            {
                Id = participant != null ? participant.Id : Guid.Empty,
                Code = athleteModel.Code,
                Name = athleteModel.Name,
                NOC = nocCode,
                FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                Time = time,
                Number = indexes.TryGetValue(ConverterConstants.INDEX_NR, out int value5) ? this.RegExpService.MatchInt(data[value5].InnerText) : null,
                Indermediate1 = indexes.TryGetValue(ConverterConstants.INDEX_INTERMEDIATE_1, out int value12) ? this.dateService.ParseTime(data[value12].InnerText) : null,
                Indermediate2 = indexes.TryGetValue(ConverterConstants.INDEX_INTERMEDIATE_2, out int value13) ? this.dateService.ParseTime(data[value13].InnerText) : null,
                Indermediate3 = indexes.TryGetValue(ConverterConstants.INDEX_INTERMEDIATE_3, out int value14) ? this.dateService.ParseTime(data[value14].InnerText) : null,
                Indermediate4 = indexes.TryGetValue(ConverterConstants.INDEX_INTERMEDIATE_4, out int value15) ? this.dateService.ParseTime(data[value15].InnerText) : null,
                Indermediate5 = indexes.TryGetValue(ConverterConstants.INDEX_INTERMEDIATE_5, out int value16) ? this.dateService.ParseTime(data[value16].InnerText) : null,
            };

            round.Cyclists.Add(cyclist);
        }
    }

    private CRDRoad SetCRDRoad(HtmlDocument htmlDocument)
    {
        var distance = this.RegExpService.MatchFirstGroup(htmlDocument.DocumentNode.OuterHtml, @"Distance:(.*?)km");
        var inter1 = this.RegExpService.MatchFirstGroup(htmlDocument.DocumentNode.OuterHtml, @"Intermediate 1:(.*?)km");
        var inter2 = this.RegExpService.MatchFirstGroup(htmlDocument.DocumentNode.OuterHtml, @"Intermediate 2:(.*?)km");
        var inter3 = this.RegExpService.MatchFirstGroup(htmlDocument.DocumentNode.OuterHtml, @"Intermediate 3:(.*?)km");
        var inter4 = this.RegExpService.MatchFirstGroup(htmlDocument.DocumentNode.OuterHtml, @"Intermediate 4:(.*?)km");
        var inter5 = this.RegExpService.MatchFirstGroup(htmlDocument.DocumentNode.OuterHtml, @"Intermediate 5:(.*?)km");

        return new CRDRoad
        {
            Distance = this.RegExpService.MatchDecimal(distance),
            Intermediate1 = this.RegExpService.MatchDecimal(inter1),
            Intermediate2 = this.RegExpService.MatchDecimal(inter2),
            Intermediate3 = this.RegExpService.MatchDecimal(inter3),
            Intermediate4 = this.RegExpService.MatchDecimal(inter4),
            Intermediate5 = this.RegExpService.MatchDecimal(inter5),
        };
    }

    private async Task ProcessCyclingMountainBikeAsync(ConvertOptions options)
    {
        var eventRound = this.CreateEventRound<MTBRound>(options.HtmlDocument, options.Event.Name);

        var round = this.CreateRound<MTBRound>(eventRound.Dates.From, eventRound.Format, RoundType.Final, eventRound.EventName);

        var rows = options.StandingTable.HtmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);
            var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
            var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
            var participant = await this.participantsService.GetAsync(athleteModel.Code, options.Event.Id, nocCacheModel.Id);

            var margin = indexes.TryGetValue(ConverterConstants.INDEX_MARGIN, out int value1) ? this.dateService.ParseTime(data[value1].InnerText) : null;
            var time = indexes.TryGetValue(ConverterConstants.INDEX_TIME, out int value2) ? this.dateService.ParseTime(data[value2].InnerText) : null;

            if (margin != null && time == null)
            {
                time = round.Bikers.FirstOrDefault().Time + margin;
            }

            var biker = new MTBBiker
            {
                Id = participant.Id,
                Code = athleteModel.Code,
                Name = athleteModel.Name,
                NOC = nocCode,
                FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                Time = time,
                Indermediate1 = indexes.TryGetValue(ConverterConstants.INDEX_INTERMEDIATE_1, out int value12) ? this.dateService.ParseTime(data[value12].InnerText) : null,
                Indermediate2 = indexes.TryGetValue(ConverterConstants.INDEX_INTERMEDIATE_2, out int value13) ? this.dateService.ParseTime(data[value13].InnerText) : null,
                Indermediate3 = indexes.TryGetValue(ConverterConstants.INDEX_INTERMEDIATE_3, out int value14) ? this.dateService.ParseTime(data[value14].InnerText) : null,
                Indermediate4 = indexes.TryGetValue(ConverterConstants.INDEX_INTERMEDIATE_4, out int value15) ? this.dateService.ParseTime(data[value15].InnerText) : null,
                Indermediate5 = indexes.TryGetValue(ConverterConstants.INDEX_INTERMEDIATE_5, out int value16) ? this.dateService.ParseTime(data[value16].InnerText) : null,
                Indermediate6 = indexes.TryGetValue(ConverterConstants.INDEX_INTERMEDIATE_6, out int value17) ? this.dateService.ParseTime(data[value17].InnerText) : null,
                Indermediate7 = indexes.TryGetValue(ConverterConstants.INDEX_INTERMEDIATE_7, out int value18) ? this.dateService.ParseTime(data[value18].InnerText) : null,
            };

            round.Bikers.Add(biker);
        }

        eventRound.Rounds.Add(round);

        await this.ProcessJsonAsync(eventRound, options);
    }

    private async Task ProcessCyclingBMXRacingAsync(ConvertOptions options)
    {
        var eventRound = this.CreateEventRound<BMXRound>(options.HtmlDocument, options.Event.Name);

        foreach (var table in options.Tables)
        {
            var format = this.RegExpService.MatchFirstGroup(table.HtmlDocument.DocumentNode.OuterHtml, @"<th>Format<\/th>\s*<td(?:.*?)>(.*?)<\/td>");
            var dateString = this.RegExpService.MatchFirstGroup(table.HtmlDocument.DocumentNode.OuterHtml, @"<th>\s*Date\s*<\/th>\s*<td>(.*?)<\/td>");
            var dateModel = this.dateService.ParseDate(dateString);
            var round = this.CreateRound<BMXRound>(dateModel.From, format, table.Round, eventRound.EventName);

            var heats = this.SplitHeats(table);
            if (heats.Any())
            {
                foreach (var heat in heats)
                {
                    var heatType = this.NormalizeService.MapHeats(heat.Title);
                    await this.SetBMXBikersAsync(round, heat.HtmlDocument, options.Event, heatType);
                }
            }
            else
            {
                await this.SetBMXBikersAsync(round, table.HtmlDocument, options.Event, HeatType.None);
            }

            eventRound.Rounds.Add(round);
        }

        await this.ProcessJsonAsync(eventRound, options);
    }

    private async Task SetBMXBikersAsync(BMXRound round, HtmlDocument htmlDocument, EventCacheModel eventCache, HeatType heat)
    {
        var rows = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        foreach (var row in rows.Skip(1))
        {
            var data = row.Elements("td").ToList();
            var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);
            var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
            var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
            var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id, nocCacheModel.Id);

            var time = indexes.TryGetValue(ConverterConstants.INDEX_BEST_TIME, out int value1) ? this.dateService.ParseTime(data[value1].InnerText) : null;
            time ??= indexes.TryGetValue(ConverterConstants.INDEX_TIME, out int value2) ? this.dateService.ParseTime(data[value2].InnerText) : null;

            var biker = new BMXBiker
            {
                Id = participant.Id,
                Code = athleteModel.Code,
                Name = athleteModel.Name,
                NOC = nocCode,
                FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                Qualification = this.OlympediaService.FindQualification(row.OuterHtml),
                Heat = heat,
                Time = time,
                Points = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value3) ? this.RegExpService.MatchInt(data[value3].InnerText) : null,
                Race1Points = indexes.TryGetValue(ConverterConstants.INDEX_RUN_1_POINTS, out int value4) ? this.RegExpService.MatchInt(data[value4].InnerText) : null,
                Race2Points = indexes.TryGetValue(ConverterConstants.INDEX_RUN_2_POINTS, out int value5) ? this.RegExpService.MatchInt(data[value5].InnerText) : null,
                Race3Points = indexes.TryGetValue(ConverterConstants.INDEX_RUN_3_POINTS, out int value6) ? this.RegExpService.MatchInt(data[value6].InnerText) : null,
                Race1Time = indexes.TryGetValue(ConverterConstants.INDEX_RACE_1, out int value7) ? this.dateService.ParseTime(data[value7].InnerText) : null,
                Race2Time = indexes.TryGetValue(ConverterConstants.INDEX_RACE_2, out int value8) ? this.dateService.ParseTime(data[value8].InnerText) : null,
                Race3Time = indexes.TryGetValue(ConverterConstants.INDEX_RACE_3, out int value9) ? this.dateService.ParseTime(data[value9].InnerText) : null,
                Race4Time = indexes.TryGetValue(ConverterConstants.INDEX_RACE_4, out int value10) ? this.dateService.ParseTime(data[value10].InnerText) : null,
                Race5Time = indexes.TryGetValue(ConverterConstants.INDEX_RACE_5, out int value11) ? this.dateService.ParseTime(data[value11].InnerText) : null,
            };

            round.Bikers.Add(biker);
        }
    }

    private async Task ProcessCyclingBMXFreestyleAsync(ConvertOptions options)
    {
        var eventRound = this.CreateEventRound<BMFRound>(options.HtmlDocument, options.Event.Name);

        foreach (var table in options.Tables)
        {
            var format = this.RegExpService.MatchFirstGroup(table.HtmlDocument.DocumentNode.OuterHtml, @"<th>Format<\/th>\s*<td(?:.*?)>(.*?)<\/td>");
            var dateString = this.RegExpService.MatchFirstGroup(table.HtmlDocument.DocumentNode.OuterHtml, @"<th>\s*Date\s*<\/th>\s*<td>(.*?)<\/td>");
            var dateModel = this.dateService.ParseDate(dateString);
            var round = this.CreateRound<BMFRound>(dateModel.From, format, table.Round, eventRound.EventName);
            round.Judges = await this.SetBMFJudgesAsync(table.HtmlDocument, options.Event);

            var rows = table.HtmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");
            var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
            var indexes = this.OlympediaService.FindIndexes(headers);

            foreach (var row in rows.Skip(1))
            {
                var data = row.Elements("td").ToList();
                var nocCode = this.OlympediaService.FindNOCCode(row.OuterHtml);
                var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == nocCode);
                var athleteModel = this.OlympediaService.FindAthlete(row.OuterHtml);
                var participant = await this.participantsService.GetAsync(athleteModel.Code, options.Event.Id, nocCacheModel.Id);

                var biker = new BMFBiker
                {
                    Id = participant.Id,
                    Code = athleteModel.Code,
                    Name = athleteModel.Name,
                    NOC = nocCode,
                    FinishStatus = this.OlympediaService.FindStatus(row.OuterHtml),
                    Points = indexes.TryGetValue(ConverterConstants.INDEX_POINTS, out int value1) ? this.RegExpService.MatchDecimal(data[value1].InnerText) : null,
                    Run1Points = indexes.TryGetValue(ConverterConstants.INDEX_RUN1, out int value2) ? this.RegExpService.MatchDecimal(data[value2].InnerText) : null,
                    Run2Points = indexes.TryGetValue(ConverterConstants.INDEX_RUN2, out int value3) ? this.RegExpService.MatchDecimal(data[value3].InnerText) : null,
                };

                round.Bikers.Add(biker);
            }

            eventRound.Rounds.Add(round);
        }

        await this.ProcessJsonAsync(eventRound, options);
    }

    private async Task<List<BaseJudge>> SetBMFJudgesAsync(HtmlDocument htmlDocument, EventCacheModel eventCache)
    {
        var judges = new List<BaseJudge>
        {
            await this.CreateJudgeAsync(htmlDocument, eventCache, @"<th>Head Judge<\/th>(.*?)<\/tr>", "Head Judge")
        };

        var matches = this.RegExpService.Matches(htmlDocument.ParsedText, @"<th>Judge<\/th>(.*?)<\/tr>");
        foreach (System.Text.RegularExpressions.Match match in matches)
        {
            htmlDocument.LoadHtml(match.Groups[0].Value);
            var judge = await this.CreateJudgeAsync(htmlDocument, eventCache, @"<th>Judge<\/th>(.*)", "Judge");
            judges.Add(judge);
        }

        judges.RemoveAll(x => x == null);
        return judges;
    }
    #endregion CYCLING

    #region CURLING
    private async Task ProcessCurlingSkiing(ConvertOptions options)
    {
        var eventRound = this.CreateEventRound<CURRound>(options.HtmlDocument, options.Event.Name);

        foreach (var table in options.Tables)
        {
            var format = this.RegExpService.MatchFirstGroup(table.HtmlDocument.DocumentNode.OuterHtml, @"<th>Format<\/th>\s*<td(?:.*?)>(.*?)<\/td>");
            var round = this.CreateRound<CURRound>(eventRound.Dates.From, format, table.Round, eventRound.EventName);
            var rows = table.HtmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']//tr");

            foreach (var row in rows.Where(x => this.OlympediaService.IsMatchNumber(x.InnerText)))
            {
                var data = row.Elements("td").ToList();

                var team1NOCCode = this.OlympediaService.FindNOCCode(data[2].OuterHtml);
                var team1NOCCodeCache = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == team1NOCCode);
                var team1 = await this.teamsService.GetAsync(team1NOCCodeCache.Id, options.Event.Id);

                var team2NOCCode = this.OlympediaService.FindNOCCode(data[4].OuterHtml);
                var team2NOCCodeCache = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == team2NOCCode);
                var team2 = await this.teamsService.GetAsync(team2NOCCodeCache.Id, options.Event.Id);
                var matchResult = this.OlympediaService.GetMatchResult(data[3].InnerText, MatchResultType.Points);

                var match = new CURTeamMatch
                {
                    MatchNumber = this.OlympediaService.FindMatchNumber(data[0].InnerText),
                    Round = table.Round,
                    RoundInfo = table.RoundInfo,
                    MatchType = this.OlympediaService.FindMatchType(table.Round, data[0].InnerText),
                    MatchInfo = this.OlympediaService.FindMatchInfo(data[0].InnerText),
                    Date = this.dateService.ParseDate(data[1].InnerText, options.Game.Year).From,
                    ResultId = this.OlympediaService.FindResultNumber(data[0].OuterHtml),
                    Decision = this.OlympediaService.FindDecision(row.OuterHtml),
                    Team1 = new CURTeam
                    {
                        Id = team1.Id,
                        Name = team1.Name,
                        NOC = team1NOCCode,
                        Points = matchResult.Points1,
                        Result = matchResult.Result1,
                    },
                    Team2 = new CURTeam
                    {
                        Id = team2.Id,
                        Name = team2.Name,
                        NOC = team2NOCCode,
                        Points = matchResult.Points2,
                        Result = matchResult.Result2
                    }
                };

                var document = options.Documents.FirstOrDefault(x => x.Url.EndsWith($"{match.ResultId}"));
                if (document != null)
                {
                    var htmlDocument = this.CreateHtmlDocument(document);
                    var bioDataHtml = this.RegExpService.MatchFirstGroup(htmlDocument.ParsedText, @"Score<\/h2>\s*<table class=""biodata"">(.*?)<\/table>");
                    this.ConvertCURTeamsResults(match, bioDataHtml);

                    var tables = htmlDocument.DocumentNode.SelectNodes("//table[@class='table table-striped']");
                    await this.SetCURTeamsAsync(match.Team1, tables[0].OuterHtml, options.Event);
                    await this.SetCURTeamsAsync(match.Team2, tables[1].OuterHtml, options.Event);
                }

                round.TeamMatches.Add(match);
            }

            eventRound.Rounds.Add(round);
        }

        await this.ProcessJsonAsync(eventRound, options);
    }

    private async Task SetCURTeamsAsync(CURTeam team, string html, EventCacheModel eventCache)
    {
        var htmlDocument = new HtmlDocument();
        htmlDocument.LoadHtml(html);
        var rows = htmlDocument.DocumentNode.SelectNodes("//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        for (int i = 1; i < rows.Count - 1; i++)
        {
            var data = rows[i].Elements("td").ToList();
            var athleteModel = this.OlympediaService.FindAthlete(rows[i].OuterHtml);
            var nocCacheModel = this.DataCacheService.NOCCacheModels.FirstOrDefault(x => x.Code == team.NOC);
            var participant = await this.participantsService.GetAsync(athleteModel.Code, eventCache.Id, nocCacheModel.Id);

            var player = new CURPlayer
            {
                Id = participant.Id,
                Code = athleteModel.Code,
                Name = athleteModel.Name,
                NOC = team.NOC,
                Percent = indexes.TryGetValue(ConverterConstants.INDEX_PERCENT, out int value1) ? this.RegExpService.MatchInt(data[value1].InnerText) : null,
                Position = indexes.TryGetValue(ConverterConstants.INDEX_POSITION, out int value2) ? data[value2].InnerText : null,

            };

            team.Players.Add(player);
        }
    }

    private void ConvertCURTeamsResults(CURTeamMatch match, string html)
    {
        var htmlDocument = new HtmlDocument();
        htmlDocument.LoadHtml(html);
        var rows = htmlDocument.DocumentNode.SelectNodes("//tr");
        var headers = rows.First().Elements("th").Select(x => x.InnerText).ToList();
        var indexes = this.OlympediaService.FindIndexes(headers);

        for (int i = 1; i < rows.Count; i++)
        {
            var data = rows[i].Elements("td").ToList();
            var team = match.Team1;
            if (i % 2 == 0)
            {
                team = match.Team2;
            }

            team.End1 = indexes.TryGetValue(ConverterConstants.INDEX_ARROW_1, out int value1) ? this.RegExpService.MatchInt(data[value1].InnerText) : null;
            team.End2 = indexes.TryGetValue(ConverterConstants.INDEX_ARROW_2, out int value2) ? this.RegExpService.MatchInt(data[value2].InnerText) : null;
            team.End3 = indexes.TryGetValue(ConverterConstants.INDEX_ARROW_3, out int value3) ? this.RegExpService.MatchInt(data[value3].InnerText) : null;
            team.End4 = indexes.TryGetValue(ConverterConstants.INDEX_ARROW_4, out int value4) ? this.RegExpService.MatchInt(data[value4].InnerText) : null;
            team.End5 = indexes.TryGetValue(ConverterConstants.INDEX_ARROW_5, out int value5) ? this.RegExpService.MatchInt(data[value5].InnerText) : null;
            team.End6 = indexes.TryGetValue(ConverterConstants.INDEX_ARROW_6, out int value6) ? this.RegExpService.MatchInt(data[value6].InnerText) : null;
            team.End7 = indexes.TryGetValue(ConverterConstants.INDEX_ARROW_7, out int value7) ? this.RegExpService.MatchInt(data[value7].InnerText) : null;
            team.End8 = indexes.TryGetValue(ConverterConstants.INDEX_ARROW_8, out int value8) ? this.RegExpService.MatchInt(data[value8].InnerText) : null;
            team.End9 = indexes.TryGetValue(ConverterConstants.INDEX_ARROW_9, out int value9) ? this.RegExpService.MatchInt(data[value9].InnerText) : null;
            team.End10 = indexes.TryGetValue(ConverterConstants.INDEX_ARROW_1, out int value10) ? this.RegExpService.MatchInt(data[value10].InnerText) : null;
        }
    }
    #endregion CURLING

